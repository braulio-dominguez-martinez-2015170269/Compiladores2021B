program:            statement (lf statement)*
statement:          "VARIABLE" identifier ("," identifier)*
                    identifier ("[" expr "]")? "=" orexpr
                    function-call
                    "SI" orexpr "ENTONCES" statement ("SINO" statement)?
                    "SI" orexpr lf program lf ("SINO" program)? "FIN"
                    "MIENTRAS" orexpr "HAZ" statement
                    "MIENTRAS" orexpr lf program lf "TERMINAR"
                    "DESDE" identifier "=" expr "HASTA" expr ("STEP" expr)? "HAZ" statement
                    "DESDE" identifier "=" expr "HASTA" expr ("STEP" expr)? lf program lf "SIGUIENTE"
                    "LIMPIAR"
                    "IMPRIME" (orexpr ("," orexpr)*)?
                    "IMPRIMIR" (orexpr ("," orexpr)*)?
                    "CPRINT" (orexpr ("," orexpr)*)?
                    "DUMP"
                    "CDUMP"
                    "NAMESPACE" identifier lf program lf "ENDNAMESPACE"
                    "FUNCTION" identifier "(" (identifier ("," identifier)*)? ")" lf program lf ("RETURN" orexpr)? lf "ENDFUNCTION"
                    "CLEAR"
                    "STROKECOLOR" orexpr "," orexpr "," orexpr
                    "FILLCOLOR" orexpr "," orexpr "," orexpr
                    "LINEWIDTH" orexpr
                    "POINT" orexpr "," orexpr
                    "LINE" orexpr "," orexpr "," orexpr "," orexpr
                    "RECT" orexpr "," orexpr "," orexpr "," orexpr "," orexpr

orexpr:             andexpr ("||" andexpr)*
andexpr:            eqexpr ("&&" eqexpr)*
eqexpr:             glexpr (("=="|"!=") glexpr)*
glexpr:             expr (("<"|"<="|">"|">=") expr)*

expr:               term (("+"|"-") term)*
term:               factor (("*"|"/"|"%") factor)*
factor:             ("+"|"-")? int|float
                    string
                    "~" orexpr
                    "(" orexpr ")"
                    function-call
                    list ("[" expr "]")?
                    buildin-function

string:             """ ([^"]|\\")* """
int:                [0-9]+
float:              [0-9]+ ("." [0-9])+
list:               "[" (orexpr ("," orexpr)*)? "]"
identifier:         [a-zA-Z_\$][\$_0-9\p{L}]*
lf:                 (":"|"\n")

function-call:      identifier "(" (orexpr ("," orexpr)*)? ")"
buildin-function:   "RND()"
                    "LEFT(string, number)"
                    "RIGHT(string, number)"
                    "MID(string, number, number)"
                    "ENTERO(string|float)"
                    "FLOTANTE(string|int)"
                    "CADENA(int|float)"
                    "ESENTERO(orexpr)"
                    "ESFLOTANTE(orexpr)"
                    "ESCADENA(orexpr)"
                    "FECHA()"
                    "TIEMPO()"
                    "LEN(string|list)"
                    "INPUT(string)"
                    "RAIZ(number)"
                    "ABSOLUTO(number)"
                    "REDONDEO(number)"
                    "ABAJO(number)"
                    "ARRIBA(number)"
                    "SENO(number)"
                    "COSENO(number)"
                    "TANGENTE(number)"
                    "LOGARITMO(number)"
                    "EXPONENCIAL(number)"
                    "POTENCIA(number, number)"
                    "SIGN(number)"
                    "ASC(string)"
                    "CHAR(number)""
